on: [pull_request, push]

jobs:
  build_fedora:
    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug, Release]
        toolchain: [llvm, gcc]
        include:
          - build_type: Debug
            toolchain: llvm
            cc: clang
            cxx: clang++
            cxx_packages: clang compiler-rt lld llvm
          - build_type: Release
            toolchain: llvm
            cc: clang
            cxx: clang++
            cxx_packages: clang libstdc++-static lld llvm
          - build_type: Debug
            toolchain: gcc
            cc: gcc
            cxx: g++
            cxx_packages: g++ libasan libubsan
          - build_type: Release
            toolchain: gcc
            cc: gcc
            cxx: g++
            cxx_packages: g++ libstdc++-static
    runs-on: ubuntu-latest
    container:
      image: fedora:33
    steps:
      - name: Install system dependencies
        run: |
          dnf -y --setopt=install_weak_deps=0 install  \
              dnf-plugins-core git  \
              cmake ninja-build python3  \
              glibc-devel libstdc++-devel ${{ matrix.cxx_packages }}
          dnf -y --setopt=install_weak_deps=0 debuginfo-install  \
              glibc libstdc++

      - name: Dump packages versions
        run: |
          dnf list installed

      - name: Checkout
        run: |
          git clone "https://github.com/${{ github.repository }}" "./"
          git checkout "${{ github.sha }}"

      - name: Register problem matchers
        run: |
          echo "::add-matcher::.github/problem_matchers.json"

      - name: Configure
        env:
          CXXFLAGS: -fdiagnostics-color=always
          LDFLAGS: -fdiagnostics-color=always
        run: |
          export CC="${{ matrix.cc }}"
          export CXX="${{ matrix.cxx }}"
          cmake -G Ninja -B "build" -D "CMAKE_BUILD_TYPE=${{ matrix.build_type }}" -D "KAE_ARCH=haswell"

      - name: Build
        run: |
          ninja -C "build"

      - name: On failure, upload build directory
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: fedora-${{ matrix.toolchain }}-${{ matrix.build_type }}-failed
          path: build

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: fedora-${{ matrix.toolchain }}-${{ matrix.build_type }}
          path: |
            build/bin
            build/lib

      - name: Test
        env:
          ASAN_OPTIONS: check_initialization_order=1:detect_stack_use_after_return=1
          UBSAN_OPTIONS: print_stacktrace=1
        run: |
          cd "build"
          ctest -V -E "clang_.*"

  build_windows:
    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug, Release]
        toolchain: [llvm, msvc]
        include:
          - toolchain: llvm
            cc: clang
            cxx: clang++
          - toolchain: msvc
            cc: cl
            cxx: cl
    runs-on: windows-latest
    defaults:
      run:
        shell: cmd
    env:
      VCVARS: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat"
    steps:
      - name: Install system dependencies
        if: matrix.toolchain == 'llvm'
        run: |
          choco install llvm --version=11.0.1

      - name: Dump tools versions
        run: |
          call "%VCVARS%"
          git --version
          cmake --version
          ninja --version
          if "${{ matrix.toolchain }}" == "llvm" ( clang --version ) else ( cl )

      - name: Checkout
        run: |
          git clone "https://github.com/${{ github.repository }}" "."
          git checkout "${{ github.sha }}"

      - name: Register problem matchers
        run: |
          echo ::add-matcher::.github/problem_matchers.json

      - name: Configure
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
        run: |
          call "%VCVARS%"
          set "PATH=C:\\Program Files\\LLVM\\bin;%PATH%"
          cmake -G Ninja -D "CMAKE_BUILD_TYPE=${{ matrix.build_type }}" -D "KAE_ARCH=haswell" -B "build"

      - name: Build
        run: |
          call "%VCVARS%"
          ninja -C "build"

      - name: On failure, upload build directory
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: windows-${{ matrix.toolchain }}-${{ matrix.build_type }}-failed
          path: build

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: windows-${{ matrix.toolchain }}-${{ matrix.build_type }}
          path: |
            build/bin
            build/lib

      - name: Test
        run: |
          call "%VCVARS%"
          cd "build"
          ctest -V -E "clang_.*"

  clang_format:
    runs-on: ubuntu-latest
    container:
      image: fedora:33
    steps:
      - name: Install system dependencies
        run: |
          dnf -y --setopt=install_weak_deps=0 install  \
              git  \
              cmake ninja-build python3  \
              clang glibc-devel libstdc++-devel clang-tools-extra lld

      - name: Dump packages versions
        run: |
          dnf list installed

      - name: Checkout
        run: |
          git clone "https://github.com/${{ github.repository }}" "./"
          git checkout "${{ github.sha }}"

      - name: Register problem matchers
        run: |
          echo "::add-matcher::.github/problem_matchers.json"

      - name: Configure
        run: |
          cmake -G Ninja -B "build"

      - name: clang-format
        run: |
          cd build
          ctest -V -R "clang_format"

  clang_tidy_linux:
    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug, Release]
    runs-on: ubuntu-latest
    container:
      image: fedora:33
    steps:
      - name: Install system dependencies
        run: |
          dnf -y --setopt=install_weak_deps=0 install  \
              git  \
              cmake ninja-build python3  \
              clang glibc-devel libstdc++-devel clang-tools-extra lld

      - name: Dump packages versions
        run: |
          dnf list installed

      - name: Checkout
        run: |
          git clone "https://github.com/${{ github.repository }}" "./"
          git checkout "${{ github.sha }}"

      - name: Register problem matchers
        run: |
          echo "::add-matcher::.github/problem_matchers.json"

      - name: Configure
        run: |
          cmake -G Ninja -B "build" -D "CMAKE_BUILD_TYPE=${{ matrix.build_type }}" -D "KAE_ARCH=haswell"

      - name: clang-tidy
        run: |
          cd build
          ctest -V -R "clang_tidy"

  clang_tidy_windows:
    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug, Release]
    runs-on: windows-latest
    defaults:
      run:
        shell: cmd
    env:
      VCVARS: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat"
    steps:
      - name: Install system dependencies
        run: |
          choco install llvm --version=11.0.1

      - name: Dump tools versions
        run: |
          call "%VCVARS%"
          git --version
          cmake --version
          ninja --version
          clang-tidy --version

      - name: Checkout
        run: |
          git clone "https://github.com/${{ github.repository }}" "."
          git checkout "${{ github.sha }}"

      - name: Configure
        run: |
          call "%VCVARS%"
          set "PATH=C:\\Program Files\\LLVM\\bin;%PATH%"
          cmake -G Ninja -D "CMAKE_BUILD_TYPE=${{ matrix.build_type }}" -D "KAE_ARCH=haswell" -B "build"

      - name: Register problem matchers
        run: |
          echo ::add-matcher::.github/problem_matchers.json

      - name: clang_tidy
        run: |
          call "%VCVARS%"
          set "PATH=C:\\Program Files\\LLVM\\bin;%PATH%"
          cd build
          ctest -V -R "clang_tidy"
