on: [pull_request, push]

env:
  LLVM_VERSION: 10

jobs:
  build_debian:
    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug, Release]
        toolchain: [llvm, gcc]
        include:
          - toolchain: llvm
            cc: clang-$LLVM_VERSION
            cxx: clang++-$LLVM_VERSION
            cxx_packages: clang-$LLVM_VERSION libstdc++-$GCC_VERSION-dev lld-$LLVM_VERSION llvm-$LLVM_VERSION
          - toolchain: gcc
            cc: gcc-$GCC_VERSION
            cxx: g++-$GCC_VERSION
            cxx_packages: g++-$GCC_VERSION
    runs-on: ubuntu-latest
    container:
      image: debian:bullseye-slim
    env:
      GCC_VERSION: 10
    steps:
      - name: Install system dependencies
        run: |
          echo "Dpkg::Use-Pty 0;" > "/etc/apt/apt.conf.d/no_pty"
          apt update
          apt -y full-upgrade
          apt -y --no-install-recommends install  \
              git ca-certificates  \
              cmake ninja-build python3  \
              clang-format-$LLVM_VERSION clang-tidy-$LLVM_VERSION  \
              ${{ matrix.cxx_packages }}

      - name: Dump packages versions
        run: |
          apt list --installed

      - name: Checkout
        run: |
          git clone "https://github.com/${{ github.repository }}" "./"
          git checkout "${{ github.sha }}"

      - name: Register problem matchers
        run: |
          echo "::add-matcher::.github/problem_matchers.json"

      - name: Configure
        env:
          CXXFLAGS: -fdiagnostics-color=always
          LDFLAGS: -fdiagnostics-color=always
        run: |
          export CC="${{ matrix.cc }}"
          export CXX="${{ matrix.cxx }}"
          cmake -G Ninja -D "CMAKE_BUILD_TYPE=${{ matrix.build_type }}" -S "." -B "build"

      - name: Build
        run: |
          ninja -C "build"

      - name: On failure, upload build directory
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: deb-${{ matrix.toolchain }}-${{ matrix.build_type }}-failed
          path: build

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: deb-${{ matrix.toolchain }}-${{ matrix.build_type }}
          path: build/bin

      - name: Test
        env:
          ASAN_OPTIONS: check_initialization_order=1:detect_stack_use_after_return=1
          UBSAN_OPTIONS: print_stacktrace=1
        run: |
          export CLANG_FORMAT="clang-format-$LLVM_VERSION"
          export CLANG_TIDY="clang-tidy-$LLVM_VERSION"
          cd "build"
          ctest --verbose

  build_windows:
    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug, Release]
        toolchain: [llvm, msvc]
        include:
          - toolchain: llvm
            cc: clang
            cxx: clang++
          - toolchain: msvc
            cc: cl
            cxx: cl
    runs-on: windows-latest
    defaults:
      run:
        shell: cmd
    env:
      VCVARS: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat"
    steps:
      - name: Install system dependencies
        if: matrix.toolchain == 'llvm'
        run: |
          choco install llvm --version=%LLVM_VERSION%.0.0

      - name: Dump tools versions
        run: |
          call "%VCVARS%"
          git --version
          cmake --version
          ninja --version

      - name: Checkout
        run: |
          git clone "https://github.com/${{ github.repository }}" "."
          git checkout "${{ github.sha }}"

      - name: Register problem matchers
        run: |
          echo ::add-matcher::.github/problem_matchers.json

      - name: Configure
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
        run: |
          call "%VCVARS%"
          set "PATH=C:\\Program Files\\LLVM\\bin;%PATH%"
          cmake -G Ninja -D "CMAKE_BUILD_TYPE=${{ matrix.build_type }}" -S "." -B "build"

      - name: Build
        run: |
          call "%VCVARS%"
          ninja -C "build"

      - name: On failure, upload build directory
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: win-${{ matrix.toolchain }}-${{ matrix.build_type }}-failed
          path: build

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: win-${{ matrix.toolchain }}-${{ matrix.build_type }}
          path: build/bin

      - name: Test
        run: |
          cd "build"
          if "${{ matrix.cc }}"=="clang" (
            set "PATH=C:\\Program Files\\LLVM\\bin;%PATH%"
            ctest --verbose
          ) else (
            ctest --verbose -E "clang_.*"
          )
